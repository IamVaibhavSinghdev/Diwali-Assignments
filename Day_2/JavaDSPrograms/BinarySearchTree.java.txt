class BSTNode {
    int data;
    BSTNode left, right;

    BSTNode(int data) {
        this.data = data;
    }
}

class BinarySearchTree {
    BSTNode root;

    void insert(int data) {
        root = insertRec(root, data);
    }

    BSTNode insertRec(BSTNode root, int data) {
        if (root == null) return new BSTNode(data);
        if (data < root.data)
            root.left = insertRec(root.left, data);
        else if (data > root.data)
            root.right = insertRec(root.right, data);
        return root;
    }

    void delete(int data) {
        root = deleteRec(root, data);
    }

    BSTNode deleteRec(BSTNode root, int data) {
        if (root == null) return null;
        if (data < root.data)
            root.left = deleteRec(root.left, data);
        else if (data > root.data)
            root.right = deleteRec(root.right, data);
        else {
            if (root.left == null) return root.right;
            else if (root.right == null) return root.left;
            root.data = minValue(root.right);
            root.right = deleteRec(root.right, root.data);
        }
        return root;
    }

    int minValue(BSTNode root) {
        int min = root.data;
        while (root.left != null) {
            min = root.left.data;
            root = root.left;
        }
        return min;
    }

    void inorder(BSTNode root) {
        if (root != null) {
            inorder(root.left);
            System.out.print(root.data + " ");
            inorder(root.right);
        }
    }

    void preorder(BSTNode root) {
        if (root != null) {
            System.out.print(root.data + " ");
            preorder(root.left);
            preorder(root.right);
        }
    }

    void postorder(BSTNode root) {
        if (root != null) {
            postorder(root.left);
            postorder(root.right);
            System.out.print(root.data + " ");
        }
    }

    public static void main(String[] args) {
        BinarySearchTree bst = new BinarySearchTree();
        bst.insert(50);
        bst.insert(30);
        bst.insert(70);
        bst.insert(20);
        bst.insert(40);
        bst.insert(60);
        bst.insert(80);

        System.out.print("Inorder: ");
        bst.inorder(bst.root);
        System.out.print("\nPreorder: ");
        bst.preorder(bst.root);
        System.out.print("\nPostorder: ");
        bst.postorder(bst.root);

        System.out.println("\n\nDeleting 20, 30, 50...");
        bst.delete(20);
        bst.delete(30);
        bst.delete(50);
        System.out.print("Inorder after deletion: ");
        bst.inorder(bst.root);
    }
}
