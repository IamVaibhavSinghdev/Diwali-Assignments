Question 1) 
SELECT 
    emp_id,
    emp_name,
    dept_id,
    salary
FROM (
    SELECT 
        emp_id,
        emp_name,
        dept_id,
        salary,
        DENSE_RANK() OVER (PARTITION BY dept_id ORDER BY salary DESC) AS rnk
    FROM employees
) AS ranked
WHERE rnk <= 5;

Question 2) 
DELIMITER $$

CREATE FUNCTION getWorkingDays(join_date DATE)
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE total_days INT DEFAULT 0;
    DECLARE working_days INT DEFAULT 0;
    DECLARE current_date DATE;

    SET current_date = join_date;

    WHILE current_date <= CURDATE() DO
        IF DAYOFWEEK(current_date) NOT IN (1,7) THEN
            SET working_days = working_days + 1;
        END IF;
        SET current_date = DATE_ADD(current_date, INTERVAL 1 DAY);
    END WHILE;

    RETURN working_days;
END $$

DELIMITER ;



Question 3) 
DELIMITER $$

CREATE PROCEDURE updateSalaryByWorkingDays(IN p_emp_id INT)
BEGIN
    DECLARE wdays INT;
    DECLARE current_salary DECIMAL(10,2);
    DECLARE new_salary DECIMAL(10,2);
    SELECT salary INTO current_salary FROM employees WHERE emp_id = p_emp_id;
    SELECT getWorkingDays(join_date) INTO wdays FROM employees WHERE emp_id = p_emp_id;

    IF wdays > 300 THEN
        SET new_salary = current_salary * 1.20; 
    ELSEIF wdays BETWEEN 200 AND 300 THEN
        SET new_salary = current_salary * 1.10; 
    ELSEIF wdays BETWEEN 100 AND 199 THEN
        SET new_salary = current_salary * 1.05; 
    ELSE
        SET new_salary = current_salary;
    END IF;

    UPDATE employees
    SET salary = new_salary
    WHERE emp_id = p_emp_id;
END $$

DELIMITER ;
